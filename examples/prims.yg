Graph<Node<int>> doPrim(Graph<Node<int>> g, Node<int> start){
	Pqueue pq = new Pqueue();
	Graph<Node<int>> lowestCosts = new Graph<Node<int>>();

	List nodes = new List<Node<int>>();
    nodes = g~nodes; 
    for(int i = 0; i < nodes.l_size(); i = i + 1){
        Node<int> cur = nodes.l_get(i);
        cur.setVisited(false);
        cur.setNodeData(INFINITY);
    }

    start.setNodeData(0);
    start.setVisited(true);

    pq.pq_push(start);
    while(!pq.isEmpty()){
        Node<int> u = pq.pq_pop();
        u.setVisited(true);

        lowestCosts.addNode(u);
        List<Node<int>> outNodes = u.getOutNodes();
        int numOutNodes = outNodes.l_size();

        for(int i = 0; i < numOutNodes; i = i + 1) {
            Node<int> adj = outNodes.l_get(i);

            if(!adj.isVisited || !lowestCosts.contains(adj~name)){
                int edgeWeight = g.getWeight(u, adj); 
                if(edgeWeight < adj~data){
                    Node<int> temp = new Node<int>();
                    temp.setNodeData(edgeWeight);
                    lowestCosts.addNode(temp);
                    lowestCosts.addEdge(temp, u, temp~data);
                }
                pq.pq_push(adj);
                adj.setVisited(true);
            }
        }
    }
    return lowestCosts;
}

void getMST(Graph<Node<int>> original, Node<int> start){
	Graph Node<int> lowestCost = doPrim(original, start);
	Graph<Node<int>> mst = new Graph<Node<int>>();


    List nodes = new List<Node<int>>();
    nodes = lowestCost~nodes; 
    for(int i = 0; i < nodes.l_size(); i = i + 1){
        Node<int> temp = new Node<int>(nodes.l_get(i)~name);
        mst.addNode(temp);
        if((temp~inNodes).l_size > 0){
        	Node<int> prev = (temp~inNodes).l_get(0);
        	if(prev != null){
        		mst.addEdge(prev, end, lowestCosts.getWeight(prev, end));
        	}
        }
    }

    mst.printGraph();
}

int main(){
	 Graph<Node<int>> g = new Graph<Node<int>>();

    Node<int> n1 = new Node<int>("n1");
    Node<int> n2 = new Node<int>("n2");
    Node<int> n3 = new Node<int>("n3");
    Node<int> n4 = new Node<int>("n4");
    Node<int> n5 = new Node<int>("n5");
    Node<int> n6 = new Node<int>("n6");
    Node<int> n7 = new Node<int>("n7");
    Node<int> n8 = new Node<int>("n8");

    g.addNode(n1);
    g.addNode(n2);
    g.addNode(n3);
    g.addNode(n4);
    g.addNode(n5);
    g.addNode(n6);
    g.addNode(n7);
    g.addNode(n8);

    g.addEdge(n1, n2, 5);
    g.addEdge(n1, n3, 7);
    g.addEdge(n1, n4, 10);
    g.addEdge(n1, n6, 2);
    g.addEdge(n1, n7, 8);
    g.addEdge(n1, n8, 13);

    g.addEdge(n2, n3, 5);
    g.addEdge(n2, n4, 6);
    g.addEdge(n2, n5, 8);
    g.addEdge(n2, n7, 3);
    g.addEdge(n2, n8, 1);

    g.addEdge(n3, n4, 11);
    g.addEdge(n3, n5, 8);
    g.addEdge(n3, n6, 6);

    g.addEdge(n4, n5, 2);
    g.addEdge(n4, n6, 14);
    g.addEdge(n4, n7, 12);


    g.addEdge(n5, n6, 9);
    g.addEdge(n5, n8, 7);

    g.addEdge(n6, n8, 4);

    g.addedge(n7, n8, 10);

    getMST(g, n3);
}